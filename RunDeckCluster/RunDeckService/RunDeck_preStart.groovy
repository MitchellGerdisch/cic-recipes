import org.hyperic.sigar.OperatingSystem
import org.cloudifysource.usm.USMUtils
import org.cloudifysource.dsl.context.ServiceContextFactory
import java.util.concurrent.TimeUnit


config = new ConfigSlurper().parse(new File("RunDeck-service.properties").toURL())
project_properties_file="${config.rundeck_config_dir}/${config.rundeck_project_name}/${config.rundeck_project_properties}"
resources_file="${config.rundeck_config_dir}.${config.rundeck_project_name}/${config.rundeck_resources_xml}"

context = ServiceContextFactory.getServiceContext()
def remoteNodesService = context.waitForService("RunDeckRemoteNodes", 300, TimeUnit.SECONDS)
remoteNodesHostInstances = remoteNodesService.waitForInstances(remoteNodesService.numberOfPlannedInstances, 60, TimeUnit.SECONDS)

// Set up and place the project.properties file used by RunDeck
println "RunDeck_preStart.groovy: Building and placing project.properties file under ${config.rundeck_config_dir}/${config.rundeck_project_name}"

Builder = new AntBuilder()
Builder.sequential {
	echo(message:"#Project configuration, generated by RunDeckService", file:"${project_properties_file}", append:"false");
	echo(message:"project.name=${config.rundeck_project_name}", file:"${project_properties_file}", append:"true");
	echo(message:"resources.source.1.config.requireFileExists=false", file:"${project_properties_file}", append:"true");
	echo(message:"service.NodeExecutor.default.provider=jsch-ssh", file:"${project_properties_file}", append:"true");
	echo(message:"resources.source.1.config.includeServerNode=false", file:"${project_properties_file}", append:"true");
	echo(message:"project.resources.file=${resources_file}", file:"${project_properties_file}", append:"true");
	echo(message:"project.ssh-keypath=${config.rundeck_server_ssh_dir}/${config.rundeck_private_ssh_key}", file:"${project_properties_file}", append:"true");
	echo(message:"service.FileCopier.default.provider=jsch-scp", file:"${project_properties_file}", append:"true");
	echo(message:"resources.source.1.type=file", file:"${project_properties_file}", append:"true");
	chown(file:"${project_properties_file}", owner:"rundeck")
}
	
	


// Set up and place the resources.xml file used by RunDeck
// Loop through remoteNodeHostInstances and grab remoteNodeHostInstances[X].hostAddress and build resources.xml file
mysqlServerIP = mysqlHostInstances[0].hostAddress
if (mysqlServerIP == null) {
        mysqlServerIP = hostIp
}

println "Retrieving mySqlServerIP: $mysqlServerIP"

def nfsService = context.waitForService("nfsServer", 300, TimeUnit.SECONDS)
nfsHostInstances = nfsService.waitForInstances(nfsService.numberOfPlannedInstances, 60, TimeUnit.SECONDS)

nfsServerIP = nfsHostInstances[0].hostAddress
if (nfsServerIP == null) {
        nfsServerIP = hostIp
}

println "Retrieving nfsServerIP: $nfsServerIP"

Builder = new AntBuilder()

println "Start: copy config and execute start.sh"
Builder.sequential {
		replaceregexp(file:"${context.serviceDirectory}/config.php",
					match:"MYSQLSERVERIP",
					replace:"$mysqlServerIP")		
		copy(file:"${context.serviceDirectory}/config.php", tofile:"/var/www/html/owncloud/config/config.php")
		chmod(dir:"${context.serviceDirectory}", perm:"+x", includes:"*.sh")					
		exec(executable:"${context.serviceDirectory}/start.sh",osfamily:"unix") {
			arg value:"$nfsServerIP"
			}
println "Finished attempting to copy config and execute start.sh"

}